# Install GPU version MXNet on Windows by building from source

## The following method has been tested on 64bit Windows Server 10 and CUDA 9.1.

To build and install MXNet yourself, you need the following dependencies. Install the required dependencies:
If Microsoft Visual Studio 2017 is not already installed, download and install it here: https://www.visualstudio.com/downloads/. You can download and install the free community edition.
Download and install the v3.11 version of CMake here: https://cmake.org/files/v3.11/cmake-3.11.0-rc4-win64-x64.msi ,if it is not already installed.
Download and install the v3.4.1 version of OpenCV here: https://sourceforge.net/projects/opencvlibrary/files/opencv-win/3.4.1/opencv-3.4.1-vc14_vc15.exe/download .
Unzip the OpenCV package.
Set the environment variable OpenCV_DIR to point to the OpenCV build directory. (e.g., OpenCV_DIR = c:\utils\opencv\build) (NOTE: make the the length of the path of the build directory short, there might be some mysterious error if you don’t do so)
If you don’t have the Intel Math Kernel Library (MKL) installed, download and install the v0.2.20 version of OpenBlas here: https://sourceforge.net/projects/openblas/files/v0.2.20/OpenBLAS%200.2.20%20version.zip/download .
Set the environment variable OpenBLAS_HOME to point to the OpenBLAS directory that contains the include and lib directories. (e.g., OpenBLAS_HOME = c:\utils\OpenBLAS)
Download and install CUDA. Install CUDA through https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal, and Download the base installer cuda_9.1.85_win10.exe .
Download and install cuDNN. To get access to the download link, register as an NVIDIA community user. Follow the link: http://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-windows to install the cuDNN.
Download and install git following this link: https://git-for-windows.github.io/

After you have installed all of the required dependencies, build the MXNet source code:

Start cmd in windows.

Download the MXNet source code from GitHub by using following command:
cd C:\
git clone https://github.com/apache/incubator-mxnet.git --recursive

Change the version of the Visual studio 2017 to v14.11 using the following command (by default the VS2017 installed in the following path):
"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat" -vcvars_ver=14.11

Create a build dir using the following command and going the directory, for example: 
mkdir C:\build
cd C:\build

CMake the MXNet source code by using following command:
cmake -G "Visual Studio 15 2017 Win64" -T cuda=9.1,host=x64 -DUSE_CUDA=1 -DUSE_CUDNN=1 -DUSE_NVRTC=1 -DUSE_OPENCV=1 -DUSE_OPENMP=1 -DUSE_BLAS=open -DUSE_LAPACK=1 -DUSE_DIST_KVSTORE=0 -DCUDA_ARCH_LIST=Common -DCUDA_TOOLSET=9.1 -DCUDNN_INCLUDE=C:\cuda\include -DCUDNN_LIBRARY=C:\cuda\lib\x64\cudnn.lib "C:\incubator-mxnet"

[NOTE: make sure the DCUDNN_INCLUDE and DCUDNN_LIBRARY pointing to the “include” and “cudnn.lib” of your CUDA installed location, and the "C:\incubator-mxnet" is the location of the source code you just git in the previous step]

After the CMake successfully completed, compile the the MXNet source code by using following command:
msbuild mxnet.sln /p:Configuration=Release;Platform=x64 /maxcpucount

Then:

Install MXNet for Python
##TODO:

Intall python and numpy through anaconda by using the following link: https://repo.continuum.io/archive/Anaconda3-5.1.0-Windows-x86_64.exe
[NOTE: make sure you are installing python 3.6 64bit version]

Next, we install Python package interface for MXNet.
    cd C:\incubator-mxnet\python
    python setup.py install
Done! We have installed MXNet with Python interface. Run below commands to verify our installation is successful.

    # Open Python terminal
    python

    # You should be able to import mxnet library without any issues.
    >>> import mxnet as mx;
    >>> a = mx.nd.ones((2, 3));
    >>> print ((a*2).asnumpy());
        [[ 2.  2.  2.]
        [ 2.  2.  2.]]
